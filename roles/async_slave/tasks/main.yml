---
- name: Ensure replication user exists on master else create it
  mysql_user:
    name: "ubuntu"
    host: "%"
    password: "asd"
    priv: "*.*:REPLICATION SLAVE,REPLICATION CLIENT"
    state: present
    login_unix_socket: /var/run/mysqld/mysqld.sock
  when: ansible_default_ipv4.address == groups['master_node'][0]

# Get gtid_binlog_pos value from master as gtid[2]
- name: Get the gtid of gtid_binlog_pos
  command: /usr/bin/mysql -u root -e "show global variables like 'gtid_binlog_pos'"
  register: gtid_str
  when: ansible_default_ipv4.address == groups['master_node'][0]

- set_fact:
    gtid: "{{ gtid_str.stdout.split('\t') }}"
  when: ansible_default_ipv4.address == groups['master_node'][0]

# Stop slave on slave node
- name: Stop slave on slave node
  command: /usr/bin/mysql -u root -e "STOP SLAVE"
  when: ansible_default_ipv4.address == groups['slave_node'][0]

- name: Get global gtid_slave_pos value
  command: /usr/bin/mysql -u root -e "show global variables like 'gtid_slave_pos'"
  register: slave_stat
  when: ansible_default_ipv4.address == groups['slave_node'][0]

- set_fact:
    s_pos: "{{ slave_stat.stdout.split('\t') }}"
  when: ansible_default_ipv4.address == groups['slave_node'][0]

- name: Declare the slave_pos global variable
  command: /usr/bin/mysql -u root -e "SET GLOBAL gtid_slave_pos = '{{ hostvars[inventory_hostname]['gtid'][2] }}'"
  when: 
    - ansible_default_ipv4.address == groups['slave_node'][0]
    - s_pos.2 is not defined

- name: Configuring replication in slave using shell command
  command: /usr/bin/mysql -u root -e "CHANGE MASTER TO MASTER_HOST='{{ hostvars[groups['master_node'][0]]['ansible_host'] }}', MASTER_USER='kmaster', MASTER_PASSWORD='kiran', MASTER_USE_GTID=slave_pos"
  when: ansible_default_ipv4.address == groups['slave_node'][0]

- name: Start slave on slave node
  command: /usr/bin/mysql -u root -e "START SLAVE"
  when: ansible_default_ipv4.address == groups['slave_node'][0]

# Stop server on slave node
- name: Stop MariaDB on slave node
  service: name=mariadb state=stopped
  when: ansible_default_ipv4.address == groups['slave_node'][0]

- name: Switch off wsrep on slave node
  replace:
    path: /etc/mysql/conf.d/galera.cnf
    regexp: 'wsrep_on=ON'
    replace: 'wsrep_on=OFF'
  when: ansible_default_ipv4.address == groups['slave_node'][0]

# Start the servers on slave node
- name: Start MariaDB on slave node
  service: name=mariadb state=started
  when: ansible_default_ipv4.address == groups['slave_node'][0]

